import Foundation
import Path
import PathKit
import XcodeGraph
import XcodeProj

/// A type that maps an `.xcworkspace` structure into a `Workspace` model.
protocol WorkspaceMapping: Sendable {
    /// Maps the current workspace into a `Workspace` model.
    ///
    /// - Returns: A `Workspace` instance representing the mapped workspace.
    /// - Throws: If any portion of the mapping process fails.
    func map() async throws -> Workspace
}

/// A mapper that translates a provided workspace into a `Workspace` model.
///
/// The `WorkspaceMapper` extracts project paths, maps schemes, and sets up generation options and
/// additional files. The resulting `Workspace` can then be used as an input to other processes,
/// such as code generation, analysis, or further transformations.
public final class WorkspaceMapper: WorkspaceMapping {
    private let workspaceProvider: WorkspaceProviding

    /// Creates a new `WorkspaceMapper`.
    ///
    /// - Parameter workspaceProvider: A provider capable of supplying a parsed `XCWorkspace` and its file paths.
    public init(workspaceProvider: WorkspaceProviding) {
        self.workspaceProvider = workspaceProvider
    }

    /// Maps the current workspace into a `Workspace` model.
    ///
    /// This method identifies all `.xcodeproj` files in the workspace, maps any detected schemes,
    /// and constructs a fully-populated `Workspace` instance. It sets default generation options,
    /// and includes hooks for adding additional files or IDE template macros if needed.
    ///
    /// - Returns: A fully constructed `Workspace` instance.
    /// - Throws: If extracting projects or mapping schemes fails.
    public func map() async throws -> Workspace {
        let xcworkspace = workspaceProvider.xcworkspace
        let xcWorkspacePath = workspaceProvider.xcWorkspacePath
        let srcPath = workspaceProvider.workspaceDirectory
        let projectPaths = try extractProjectPaths(from: xcworkspace.data.children, srcPath: srcPath)
        let projectAbsolutePaths = projectPaths.map { $0 }

        let workspaceName = xcWorkspacePath.basenameWithoutExt
        let schemes = try await mapSchemes(from: srcPath)

        let ideTemplateMacros: IDETemplateMacros? = nil
        let additionalFiles: [FileElement] = []
        let generationOptions = Workspace.GenerationOptions(
            enableAutomaticXcodeSchemes: nil,
            autogeneratedWorkspaceSchemes: .disabled,
            lastXcodeUpgradeCheck: nil,
            renderMarkdownReadme: false
        )

        return Workspace(
            path: srcPath,
            xcWorkspacePath: xcWorkspacePath,
            name: workspaceName,
            projects: projectAbsolutePaths,
            schemes: schemes,
            generationOptions: generationOptions,
            ideTemplateMacros: ideTemplateMacros,
            additionalFiles: additionalFiles
        )
    }

    /// Recursively extracts all `.xcodeproj` paths from the workspace’s file and group references.
    ///
    /// - Parameters:
    ///   - elements: The array of `XCWorkspaceDataElement` representing files or groups in the workspace.
    ///   - srcPath: The source directory path used as a base for resolving relative references.
    /// - Returns: An array of absolute paths to `.xcodeproj` directories.
    /// - Throws: If resolving any referenced path fails.
    private func extractProjectPaths(from elements: [XCWorkspaceDataElement], srcPath: AbsolutePath)
        throws -> [AbsolutePath]
    {
        var paths = [AbsolutePath]()

        for element in elements {
            switch element {
            case let .file(ref):
                let refPath = Path(ref.location.path)
                if refPath.extension?.lowercased() == "xcodeproj" {
                    do {
                        let absPath = try ref.absolutePath(srcPath: srcPath)
                        paths.append(absPath)
                    } catch {
                        print("⚠️ Could not resolve absolute path for \(ref.location.path): \(error)")
                    }
                }
            case let .group(group):
                let groupPaths = try extractProjectPaths(
                    from: group.children,
                    srcPath: srcPath.appending(component: group.location.path)
                )
                paths.append(contentsOf: groupPaths)
            }
        }

        return paths
    }

    /// Maps all shared schemes found within the workspace.
    ///
    /// - Parameter srcPath: The source path of the workspace.
    /// - Returns: An array of mapped `Scheme` instances.
    /// - Throws: If reading or mapping any of the schemes fails.
    private func mapSchemes(from srcPath: AbsolutePath) async throws -> [Scheme] {
        var schemes = [Scheme]()
        let sharedDataPath = Path(srcPath.pathString) + "xcshareddata/xcschemes"

        if sharedDataPath.exists {
            let schemePaths = try sharedDataPath.children().filter { $0.extension == "xcscheme" }

            for schemePath in schemePaths {
                let xcscheme = try XCScheme(path: schemePath)
                let schemeMapper = try SchemeMapper(graphType: .workspace(workspaceProvider))
                let scheme = try await schemeMapper.mapScheme(xcscheme: xcscheme, shared: true)
                schemes.append(scheme)
            }
        }

        return schemes
    }
}
